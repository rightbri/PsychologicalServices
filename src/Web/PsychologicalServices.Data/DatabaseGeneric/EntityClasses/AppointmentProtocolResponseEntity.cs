//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.3.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using PsychologicalServices.Data;
using PsychologicalServices.Data.HelperClasses;
using PsychologicalServices.Data.FactoryClasses;
using PsychologicalServices.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace PsychologicalServices.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	
	/// <summary>Entity class which represents the entity 'AppointmentProtocolResponse'.<br/><br/></summary>
	[Serializable]
	public partial class AppointmentProtocolResponseEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
			
	{
		#region Class Member Declarations
		private AppointmentProtocolResponseValueEntity _advisedOfUnexpectedDelays;
		private AppointmentProtocolResponseValueEntity _afterAssessmentNotification;
		private AppointmentProtocolResponseValueEntity _allFormsCompleted;
		private AppointmentProtocolResponseValueEntity _allPapersHaveClaimantInitialsAndDate;
		private AppointmentProtocolResponseValueEntity _askedWhichTestsShouldBeRemoved;
		private AppointmentProtocolResponseValueEntity _claimantArrivalNotification;
		private AppointmentProtocolResponseValueEntity _covidFormsCompletedBeforeEnteringRoom;
		private AppointmentProtocolResponseValueEntity _errorCheckedObservations;
		private AppointmentProtocolResponseValueEntity _onTimeArrivalAndNotification;
		private AppointmentProtocolResponseValueEntity _relevantObservationsDocumented;
		private AppointmentProtocolResponseValueEntity _respondedToQuestionsWithinRequiredTimeframe;
		private AppointmentProtocolResponseValueEntity _scansUploadedNotification;
		private AppointmentProtocolResponseValueEntity _scoringDoubleChecked;
		private AppointmentProtocolResponseValueEntity _spareSetReplenishmentRequestSent;
		private AppointmentProtocolResponseValueEntity _stapledItemsTogether;
		private AppointmentProtocolResponseValueEntity _testedClaimantsEnglishReadingLevel;
		private AppointmentProtocolResponseValueEntity _timeAssessmentLabelCompleted;
		private AppointmentProtocolResponseValueEntity _tommSimsScoreNotification;
		private AppointmentProtocolResponseValueEntity _uploadedScanLegibilityVerified;
		private AppointmentProtocolResponseValueEntity _willPersonallyDropOffPackage;
		private UserEntity _createUser;
		private UserEntity _updateUser;
		private AppointmentEntity _appointment;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		
		#endregion

		#region Statics
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AdvisedOfUnexpectedDelays</summary>
			public static readonly string AdvisedOfUnexpectedDelays = "AdvisedOfUnexpectedDelays";
			/// <summary>Member name AfterAssessmentNotification</summary>
			public static readonly string AfterAssessmentNotification = "AfterAssessmentNotification";
			/// <summary>Member name AllFormsCompleted</summary>
			public static readonly string AllFormsCompleted = "AllFormsCompleted";
			/// <summary>Member name AllPapersHaveClaimantInitialsAndDate</summary>
			public static readonly string AllPapersHaveClaimantInitialsAndDate = "AllPapersHaveClaimantInitialsAndDate";
			/// <summary>Member name AskedWhichTestsShouldBeRemoved</summary>
			public static readonly string AskedWhichTestsShouldBeRemoved = "AskedWhichTestsShouldBeRemoved";
			/// <summary>Member name ClaimantArrivalNotification</summary>
			public static readonly string ClaimantArrivalNotification = "ClaimantArrivalNotification";
			/// <summary>Member name CovidFormsCompletedBeforeEnteringRoom</summary>
			public static readonly string CovidFormsCompletedBeforeEnteringRoom = "CovidFormsCompletedBeforeEnteringRoom";
			/// <summary>Member name ErrorCheckedObservations</summary>
			public static readonly string ErrorCheckedObservations = "ErrorCheckedObservations";
			/// <summary>Member name OnTimeArrivalAndNotification</summary>
			public static readonly string OnTimeArrivalAndNotification = "OnTimeArrivalAndNotification";
			/// <summary>Member name RelevantObservationsDocumented</summary>
			public static readonly string RelevantObservationsDocumented = "RelevantObservationsDocumented";
			/// <summary>Member name RespondedToQuestionsWithinRequiredTimeframe</summary>
			public static readonly string RespondedToQuestionsWithinRequiredTimeframe = "RespondedToQuestionsWithinRequiredTimeframe";
			/// <summary>Member name ScansUploadedNotification</summary>
			public static readonly string ScansUploadedNotification = "ScansUploadedNotification";
			/// <summary>Member name ScoringDoubleChecked</summary>
			public static readonly string ScoringDoubleChecked = "ScoringDoubleChecked";
			/// <summary>Member name SpareSetReplenishmentRequestSent</summary>
			public static readonly string SpareSetReplenishmentRequestSent = "SpareSetReplenishmentRequestSent";
			/// <summary>Member name StapledItemsTogether</summary>
			public static readonly string StapledItemsTogether = "StapledItemsTogether";
			/// <summary>Member name TestedClaimantsEnglishReadingLevel</summary>
			public static readonly string TestedClaimantsEnglishReadingLevel = "TestedClaimantsEnglishReadingLevel";
			/// <summary>Member name TimeAssessmentLabelCompleted</summary>
			public static readonly string TimeAssessmentLabelCompleted = "TimeAssessmentLabelCompleted";
			/// <summary>Member name TommSimsScoreNotification</summary>
			public static readonly string TommSimsScoreNotification = "TommSimsScoreNotification";
			/// <summary>Member name UploadedScanLegibilityVerified</summary>
			public static readonly string UploadedScanLegibilityVerified = "UploadedScanLegibilityVerified";
			/// <summary>Member name WillPersonallyDropOffPackage</summary>
			public static readonly string WillPersonallyDropOffPackage = "WillPersonallyDropOffPackage";
			/// <summary>Member name CreateUser</summary>
			public static readonly string CreateUser = "CreateUser";
			/// <summary>Member name UpdateUser</summary>
			public static readonly string UpdateUser = "UpdateUser";
			/// <summary>Member name Appointment</summary>
			public static readonly string Appointment = "Appointment";
		}
		#endregion
		
		/// <summary> Static CTor for setting up custom property hashtables. Is executed before the first instance of this entity class or derived classes is constructed. </summary>
		static AppointmentProtocolResponseEntity()
		{
			SetupCustomPropertyHashtables();
		}
		
		/// <summary> CTor</summary>
		public AppointmentProtocolResponseEntity():base("AppointmentProtocolResponseEntity")
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <remarks>For framework usage.</remarks>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AppointmentProtocolResponseEntity(IEntityFields2 fields):base("AppointmentProtocolResponseEntity")
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AppointmentProtocolResponseEntity</param>
		public AppointmentProtocolResponseEntity(IValidator validator):base("AppointmentProtocolResponseEntity")
		{
			InitClassEmpty(validator, null);
		}
				
		/// <summary> CTor</summary>
		/// <param name="appointmentId">PK value for AppointmentProtocolResponse which data should be fetched into this AppointmentProtocolResponse object</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		public AppointmentProtocolResponseEntity(System.Int32 appointmentId):base("AppointmentProtocolResponseEntity")
		{
			InitClassEmpty(null, null);
			this.AppointmentId = appointmentId;
		}

		/// <summary> CTor</summary>
		/// <param name="appointmentId">PK value for AppointmentProtocolResponse which data should be fetched into this AppointmentProtocolResponse object</param>
		/// <param name="validator">The custom validator object for this AppointmentProtocolResponseEntity</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		public AppointmentProtocolResponseEntity(System.Int32 appointmentId, IValidator validator):base("AppointmentProtocolResponseEntity")
		{
			InitClassEmpty(validator, null);
			this.AppointmentId = appointmentId;
		}

		/// <summary> Protected CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected AppointmentProtocolResponseEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			if(SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
				_advisedOfUnexpectedDelays = (AppointmentProtocolResponseValueEntity)info.GetValue("_advisedOfUnexpectedDelays", typeof(AppointmentProtocolResponseValueEntity));
				if(_advisedOfUnexpectedDelays!=null)
				{
					_advisedOfUnexpectedDelays.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_afterAssessmentNotification = (AppointmentProtocolResponseValueEntity)info.GetValue("_afterAssessmentNotification", typeof(AppointmentProtocolResponseValueEntity));
				if(_afterAssessmentNotification!=null)
				{
					_afterAssessmentNotification.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_allFormsCompleted = (AppointmentProtocolResponseValueEntity)info.GetValue("_allFormsCompleted", typeof(AppointmentProtocolResponseValueEntity));
				if(_allFormsCompleted!=null)
				{
					_allFormsCompleted.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_allPapersHaveClaimantInitialsAndDate = (AppointmentProtocolResponseValueEntity)info.GetValue("_allPapersHaveClaimantInitialsAndDate", typeof(AppointmentProtocolResponseValueEntity));
				if(_allPapersHaveClaimantInitialsAndDate!=null)
				{
					_allPapersHaveClaimantInitialsAndDate.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_askedWhichTestsShouldBeRemoved = (AppointmentProtocolResponseValueEntity)info.GetValue("_askedWhichTestsShouldBeRemoved", typeof(AppointmentProtocolResponseValueEntity));
				if(_askedWhichTestsShouldBeRemoved!=null)
				{
					_askedWhichTestsShouldBeRemoved.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_claimantArrivalNotification = (AppointmentProtocolResponseValueEntity)info.GetValue("_claimantArrivalNotification", typeof(AppointmentProtocolResponseValueEntity));
				if(_claimantArrivalNotification!=null)
				{
					_claimantArrivalNotification.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_covidFormsCompletedBeforeEnteringRoom = (AppointmentProtocolResponseValueEntity)info.GetValue("_covidFormsCompletedBeforeEnteringRoom", typeof(AppointmentProtocolResponseValueEntity));
				if(_covidFormsCompletedBeforeEnteringRoom!=null)
				{
					_covidFormsCompletedBeforeEnteringRoom.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_errorCheckedObservations = (AppointmentProtocolResponseValueEntity)info.GetValue("_errorCheckedObservations", typeof(AppointmentProtocolResponseValueEntity));
				if(_errorCheckedObservations!=null)
				{
					_errorCheckedObservations.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_onTimeArrivalAndNotification = (AppointmentProtocolResponseValueEntity)info.GetValue("_onTimeArrivalAndNotification", typeof(AppointmentProtocolResponseValueEntity));
				if(_onTimeArrivalAndNotification!=null)
				{
					_onTimeArrivalAndNotification.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_relevantObservationsDocumented = (AppointmentProtocolResponseValueEntity)info.GetValue("_relevantObservationsDocumented", typeof(AppointmentProtocolResponseValueEntity));
				if(_relevantObservationsDocumented!=null)
				{
					_relevantObservationsDocumented.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_respondedToQuestionsWithinRequiredTimeframe = (AppointmentProtocolResponseValueEntity)info.GetValue("_respondedToQuestionsWithinRequiredTimeframe", typeof(AppointmentProtocolResponseValueEntity));
				if(_respondedToQuestionsWithinRequiredTimeframe!=null)
				{
					_respondedToQuestionsWithinRequiredTimeframe.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_scansUploadedNotification = (AppointmentProtocolResponseValueEntity)info.GetValue("_scansUploadedNotification", typeof(AppointmentProtocolResponseValueEntity));
				if(_scansUploadedNotification!=null)
				{
					_scansUploadedNotification.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_scoringDoubleChecked = (AppointmentProtocolResponseValueEntity)info.GetValue("_scoringDoubleChecked", typeof(AppointmentProtocolResponseValueEntity));
				if(_scoringDoubleChecked!=null)
				{
					_scoringDoubleChecked.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_spareSetReplenishmentRequestSent = (AppointmentProtocolResponseValueEntity)info.GetValue("_spareSetReplenishmentRequestSent", typeof(AppointmentProtocolResponseValueEntity));
				if(_spareSetReplenishmentRequestSent!=null)
				{
					_spareSetReplenishmentRequestSent.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_stapledItemsTogether = (AppointmentProtocolResponseValueEntity)info.GetValue("_stapledItemsTogether", typeof(AppointmentProtocolResponseValueEntity));
				if(_stapledItemsTogether!=null)
				{
					_stapledItemsTogether.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_testedClaimantsEnglishReadingLevel = (AppointmentProtocolResponseValueEntity)info.GetValue("_testedClaimantsEnglishReadingLevel", typeof(AppointmentProtocolResponseValueEntity));
				if(_testedClaimantsEnglishReadingLevel!=null)
				{
					_testedClaimantsEnglishReadingLevel.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_timeAssessmentLabelCompleted = (AppointmentProtocolResponseValueEntity)info.GetValue("_timeAssessmentLabelCompleted", typeof(AppointmentProtocolResponseValueEntity));
				if(_timeAssessmentLabelCompleted!=null)
				{
					_timeAssessmentLabelCompleted.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_tommSimsScoreNotification = (AppointmentProtocolResponseValueEntity)info.GetValue("_tommSimsScoreNotification", typeof(AppointmentProtocolResponseValueEntity));
				if(_tommSimsScoreNotification!=null)
				{
					_tommSimsScoreNotification.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_uploadedScanLegibilityVerified = (AppointmentProtocolResponseValueEntity)info.GetValue("_uploadedScanLegibilityVerified", typeof(AppointmentProtocolResponseValueEntity));
				if(_uploadedScanLegibilityVerified!=null)
				{
					_uploadedScanLegibilityVerified.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_willPersonallyDropOffPackage = (AppointmentProtocolResponseValueEntity)info.GetValue("_willPersonallyDropOffPackage", typeof(AppointmentProtocolResponseValueEntity));
				if(_willPersonallyDropOffPackage!=null)
				{
					_willPersonallyDropOffPackage.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_createUser = (UserEntity)info.GetValue("_createUser", typeof(UserEntity));
				if(_createUser!=null)
				{
					_createUser.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_updateUser = (UserEntity)info.GetValue("_updateUser", typeof(UserEntity));
				if(_updateUser!=null)
				{
					_updateUser.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_appointment = (AppointmentEntity)info.GetValue("_appointment", typeof(AppointmentEntity));
				if(_appointment!=null)
				{
					_appointment.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				this.FixupDeserialization(FieldInfoProviderSingleton.GetInstance());
			}
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
			
		}

		
		/// <summary>Performs the desync setup when an FK field has been changed. The entity referenced based on the FK field will be dereferenced and sync info will be removed.</summary>
		/// <param name="fieldIndex">The fieldindex.</param>
		protected override void PerformDesyncSetupFKFieldChange(int fieldIndex)
		{
			switch((AppointmentProtocolResponseFieldIndex)fieldIndex)
			{
				case AppointmentProtocolResponseFieldIndex.AppointmentId:
					DesetupSyncAppointment(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.OnTimeArrivalAndNotificationId:
					DesetupSyncOnTimeArrivalAndNotification(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.ClaimantArrivalNotificationId:
					DesetupSyncClaimantArrivalNotification(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.CovidFormsCompletedBeforeEnteringRoomId:
					DesetupSyncCovidFormsCompletedBeforeEnteringRoom(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.TestedClaimantsEnglishReadingLevelId:
					DesetupSyncTestedClaimantsEnglishReadingLevel(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.TommSimsScoreNotificationId:
					DesetupSyncTommSimsScoreNotification(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.AskedWhichTestsShouldBeRemovedId:
					DesetupSyncAskedWhichTestsShouldBeRemoved(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.AdvisedOfUnexpectedDelaysId:
					DesetupSyncAdvisedOfUnexpectedDelays(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.AfterAssessmentNotificationId:
					DesetupSyncAfterAssessmentNotification(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.AllPapersHaveClaimantInitialsAndDateId:
					DesetupSyncAllPapersHaveClaimantInitialsAndDate(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.ScoringDoubleCheckedId:
					DesetupSyncScoringDoubleChecked(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.RelevantObservationsDocumentedId:
					DesetupSyncRelevantObservationsDocumented(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.ErrorCheckedObservationsId:
					DesetupSyncErrorCheckedObservations(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.AllFormsCompletedId:
					DesetupSyncAllFormsCompleted(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.TimeAssessmentLabelCompletedId:
					DesetupSyncTimeAssessmentLabelCompleted(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.ScansUploadedNotificationId:
					DesetupSyncScansUploadedNotification(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.UploadedScanLegibilityVerifiedId:
					DesetupSyncUploadedScanLegibilityVerified(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.SpareSetReplenishmentRequestSentId:
					DesetupSyncSpareSetReplenishmentRequestSent(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.RespondedToQuestionsWithinRequiredTimeframeId:
					DesetupSyncRespondedToQuestionsWithinRequiredTimeframe(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.StapledItemsTogetherId:
					DesetupSyncStapledItemsTogether(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.WillPersonallyDropOffPackageId:
					DesetupSyncWillPersonallyDropOffPackage(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.CreateUserId:
					DesetupSyncCreateUser(true, false);
					break;
				case AppointmentProtocolResponseFieldIndex.UpdateUserId:
					DesetupSyncUpdateUser(true, false);
					break;
				default:
					base.PerformDesyncSetupFKFieldChange(fieldIndex);
					break;
			}
		}

		/// <summary> Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.</summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <param name="entity">Entity to set as an related entity</param>
		/// <remarks>Used by prefetch path logic.</remarks>
		protected override void SetRelatedEntityProperty(string propertyName, IEntityCore entity)
		{
			switch(propertyName)
			{
				case "AdvisedOfUnexpectedDelays":
					this.AdvisedOfUnexpectedDelays = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "AfterAssessmentNotification":
					this.AfterAssessmentNotification = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "AllFormsCompleted":
					this.AllFormsCompleted = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "AllPapersHaveClaimantInitialsAndDate":
					this.AllPapersHaveClaimantInitialsAndDate = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "AskedWhichTestsShouldBeRemoved":
					this.AskedWhichTestsShouldBeRemoved = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "ClaimantArrivalNotification":
					this.ClaimantArrivalNotification = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "CovidFormsCompletedBeforeEnteringRoom":
					this.CovidFormsCompletedBeforeEnteringRoom = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "ErrorCheckedObservations":
					this.ErrorCheckedObservations = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "OnTimeArrivalAndNotification":
					this.OnTimeArrivalAndNotification = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "RelevantObservationsDocumented":
					this.RelevantObservationsDocumented = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "RespondedToQuestionsWithinRequiredTimeframe":
					this.RespondedToQuestionsWithinRequiredTimeframe = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "ScansUploadedNotification":
					this.ScansUploadedNotification = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "ScoringDoubleChecked":
					this.ScoringDoubleChecked = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "SpareSetReplenishmentRequestSent":
					this.SpareSetReplenishmentRequestSent = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "StapledItemsTogether":
					this.StapledItemsTogether = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "TestedClaimantsEnglishReadingLevel":
					this.TestedClaimantsEnglishReadingLevel = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "TimeAssessmentLabelCompleted":
					this.TimeAssessmentLabelCompleted = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "TommSimsScoreNotification":
					this.TommSimsScoreNotification = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "UploadedScanLegibilityVerified":
					this.UploadedScanLegibilityVerified = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "WillPersonallyDropOffPackage":
					this.WillPersonallyDropOffPackage = (AppointmentProtocolResponseValueEntity)entity;
					break;
				case "CreateUser":
					this.CreateUser = (UserEntity)entity;
					break;
				case "UpdateUser":
					this.UpdateUser = (UserEntity)entity;
					break;
				case "Appointment":
					this.Appointment = (AppointmentEntity)entity;
					break;
				default:
					this.OnSetRelatedEntityProperty(propertyName, entity);
					break;
			}
		}
		
		/// <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
		/// <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
		/// <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
		protected override RelationCollection GetRelationsForFieldOfType(string fieldName)
		{
			return GetRelationsForField(fieldName);
		}

		/// <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
		/// <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
		/// <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
		internal static RelationCollection GetRelationsForField(string fieldName)
		{
			RelationCollection toReturn = new RelationCollection();
			switch(fieldName)
			{
				case "AdvisedOfUnexpectedDelays":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysId);
					break;
				case "AfterAssessmentNotification":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationId);
					break;
				case "AllFormsCompleted":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingAllFormsCompletedId);
					break;
				case "AllPapersHaveClaimantInitialsAndDate":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateId);
					break;
				case "AskedWhichTestsShouldBeRemoved":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedId);
					break;
				case "ClaimantArrivalNotification":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationId);
					break;
				case "CovidFormsCompletedBeforeEnteringRoom":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomId);
					break;
				case "ErrorCheckedObservations":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsId);
					break;
				case "OnTimeArrivalAndNotification":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationId);
					break;
				case "RelevantObservationsDocumented":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedId);
					break;
				case "RespondedToQuestionsWithinRequiredTimeframe":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeId);
					break;
				case "ScansUploadedNotification":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationId);
					break;
				case "ScoringDoubleChecked":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedId);
					break;
				case "SpareSetReplenishmentRequestSent":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentId);
					break;
				case "StapledItemsTogether":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherId);
					break;
				case "TestedClaimantsEnglishReadingLevel":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelId);
					break;
				case "TimeAssessmentLabelCompleted":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedId);
					break;
				case "TommSimsScoreNotification":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationId);
					break;
				case "UploadedScanLegibilityVerified":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedId);
					break;
				case "WillPersonallyDropOffPackage":
					toReturn.Add(Relations.AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageId);
					break;
				case "CreateUser":
					toReturn.Add(Relations.UserEntityUsingCreateUserId);
					break;
				case "UpdateUser":
					toReturn.Add(Relations.UserEntityUsingUpdateUserId);
					break;
				case "Appointment":
					toReturn.Add(Relations.AppointmentEntityUsingAppointmentId);
					break;
				default:
					break;				
			}
			return toReturn;
		}

		/// <summary>Checks if the relation mapped by the property with the name specified is a one way / single sided relation. If the passed in name is null, it/ will return true if the entity has any single-sided relation</summary>
		/// <param name="propertyName">Name of the property which is mapped onto the relation to check, or null to check if the entity has any relation/ which is single sided</param>
		/// <returns>true if the relation is single sided / one way (so the opposite relation isn't present), false otherwise</returns>
		protected override bool CheckOneWayRelations(string propertyName)
		{
			int numberOfOneWayRelations = 0;
			switch(propertyName)
			{
				case null:
					return ((numberOfOneWayRelations > 0) || base.CheckOneWayRelations(null));
				default:
					return base.CheckOneWayRelations(propertyName);
			}
		}

		/// <summary> Sets the internal parameter related to the fieldname passed to the instance relatedEntity. </summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		/// <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
		protected override void SetRelatedEntity(IEntityCore relatedEntity, string fieldName)
		{
			switch(fieldName)
			{
				case "AdvisedOfUnexpectedDelays":
					SetupSyncAdvisedOfUnexpectedDelays(relatedEntity);
					break;
				case "AfterAssessmentNotification":
					SetupSyncAfterAssessmentNotification(relatedEntity);
					break;
				case "AllFormsCompleted":
					SetupSyncAllFormsCompleted(relatedEntity);
					break;
				case "AllPapersHaveClaimantInitialsAndDate":
					SetupSyncAllPapersHaveClaimantInitialsAndDate(relatedEntity);
					break;
				case "AskedWhichTestsShouldBeRemoved":
					SetupSyncAskedWhichTestsShouldBeRemoved(relatedEntity);
					break;
				case "ClaimantArrivalNotification":
					SetupSyncClaimantArrivalNotification(relatedEntity);
					break;
				case "CovidFormsCompletedBeforeEnteringRoom":
					SetupSyncCovidFormsCompletedBeforeEnteringRoom(relatedEntity);
					break;
				case "ErrorCheckedObservations":
					SetupSyncErrorCheckedObservations(relatedEntity);
					break;
				case "OnTimeArrivalAndNotification":
					SetupSyncOnTimeArrivalAndNotification(relatedEntity);
					break;
				case "RelevantObservationsDocumented":
					SetupSyncRelevantObservationsDocumented(relatedEntity);
					break;
				case "RespondedToQuestionsWithinRequiredTimeframe":
					SetupSyncRespondedToQuestionsWithinRequiredTimeframe(relatedEntity);
					break;
				case "ScansUploadedNotification":
					SetupSyncScansUploadedNotification(relatedEntity);
					break;
				case "ScoringDoubleChecked":
					SetupSyncScoringDoubleChecked(relatedEntity);
					break;
				case "SpareSetReplenishmentRequestSent":
					SetupSyncSpareSetReplenishmentRequestSent(relatedEntity);
					break;
				case "StapledItemsTogether":
					SetupSyncStapledItemsTogether(relatedEntity);
					break;
				case "TestedClaimantsEnglishReadingLevel":
					SetupSyncTestedClaimantsEnglishReadingLevel(relatedEntity);
					break;
				case "TimeAssessmentLabelCompleted":
					SetupSyncTimeAssessmentLabelCompleted(relatedEntity);
					break;
				case "TommSimsScoreNotification":
					SetupSyncTommSimsScoreNotification(relatedEntity);
					break;
				case "UploadedScanLegibilityVerified":
					SetupSyncUploadedScanLegibilityVerified(relatedEntity);
					break;
				case "WillPersonallyDropOffPackage":
					SetupSyncWillPersonallyDropOffPackage(relatedEntity);
					break;
				case "CreateUser":
					SetupSyncCreateUser(relatedEntity);
					break;
				case "UpdateUser":
					SetupSyncUpdateUser(relatedEntity);
					break;
				case "Appointment":
					SetupSyncAppointment(relatedEntity);
					break;
				default:
					break;
			}
		}

		/// <summary> Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() </summary>
		/// <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
		/// <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
		/// <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
		protected override void UnsetRelatedEntity(IEntityCore relatedEntity, string fieldName, bool signalRelatedEntityManyToOne)
		{
			switch(fieldName)
			{
				case "AdvisedOfUnexpectedDelays":
					DesetupSyncAdvisedOfUnexpectedDelays(false, true);
					break;
				case "AfterAssessmentNotification":
					DesetupSyncAfterAssessmentNotification(false, true);
					break;
				case "AllFormsCompleted":
					DesetupSyncAllFormsCompleted(false, true);
					break;
				case "AllPapersHaveClaimantInitialsAndDate":
					DesetupSyncAllPapersHaveClaimantInitialsAndDate(false, true);
					break;
				case "AskedWhichTestsShouldBeRemoved":
					DesetupSyncAskedWhichTestsShouldBeRemoved(false, true);
					break;
				case "ClaimantArrivalNotification":
					DesetupSyncClaimantArrivalNotification(false, true);
					break;
				case "CovidFormsCompletedBeforeEnteringRoom":
					DesetupSyncCovidFormsCompletedBeforeEnteringRoom(false, true);
					break;
				case "ErrorCheckedObservations":
					DesetupSyncErrorCheckedObservations(false, true);
					break;
				case "OnTimeArrivalAndNotification":
					DesetupSyncOnTimeArrivalAndNotification(false, true);
					break;
				case "RelevantObservationsDocumented":
					DesetupSyncRelevantObservationsDocumented(false, true);
					break;
				case "RespondedToQuestionsWithinRequiredTimeframe":
					DesetupSyncRespondedToQuestionsWithinRequiredTimeframe(false, true);
					break;
				case "ScansUploadedNotification":
					DesetupSyncScansUploadedNotification(false, true);
					break;
				case "ScoringDoubleChecked":
					DesetupSyncScoringDoubleChecked(false, true);
					break;
				case "SpareSetReplenishmentRequestSent":
					DesetupSyncSpareSetReplenishmentRequestSent(false, true);
					break;
				case "StapledItemsTogether":
					DesetupSyncStapledItemsTogether(false, true);
					break;
				case "TestedClaimantsEnglishReadingLevel":
					DesetupSyncTestedClaimantsEnglishReadingLevel(false, true);
					break;
				case "TimeAssessmentLabelCompleted":
					DesetupSyncTimeAssessmentLabelCompleted(false, true);
					break;
				case "TommSimsScoreNotification":
					DesetupSyncTommSimsScoreNotification(false, true);
					break;
				case "UploadedScanLegibilityVerified":
					DesetupSyncUploadedScanLegibilityVerified(false, true);
					break;
				case "WillPersonallyDropOffPackage":
					DesetupSyncWillPersonallyDropOffPackage(false, true);
					break;
				case "CreateUser":
					DesetupSyncCreateUser(false, true);
					break;
				case "UpdateUser":
					DesetupSyncUpdateUser(false, true);
					break;
				case "Appointment":
					DesetupSyncAppointment(false, true);
					break;
				default:
					break;
			}
		}

		/// <summary> Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These entities will have to be persisted after this entity during a recursive save.</summary>
		/// <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
		protected override List<IEntity2> GetDependingRelatedEntities()
		{
			List<IEntity2> toReturn = new List<IEntity2>();


			return toReturn;
		}
		
		/// <summary> Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
		/// entities will have to be persisted before this entity during a recursive save.</summary>
		/// <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
		protected override List<IEntity2> GetDependentRelatedEntities()
		{
			List<IEntity2> toReturn = new List<IEntity2>();
			if(_advisedOfUnexpectedDelays!=null)
			{
				toReturn.Add(_advisedOfUnexpectedDelays);
			}
			if(_afterAssessmentNotification!=null)
			{
				toReturn.Add(_afterAssessmentNotification);
			}
			if(_allFormsCompleted!=null)
			{
				toReturn.Add(_allFormsCompleted);
			}
			if(_allPapersHaveClaimantInitialsAndDate!=null)
			{
				toReturn.Add(_allPapersHaveClaimantInitialsAndDate);
			}
			if(_askedWhichTestsShouldBeRemoved!=null)
			{
				toReturn.Add(_askedWhichTestsShouldBeRemoved);
			}
			if(_claimantArrivalNotification!=null)
			{
				toReturn.Add(_claimantArrivalNotification);
			}
			if(_covidFormsCompletedBeforeEnteringRoom!=null)
			{
				toReturn.Add(_covidFormsCompletedBeforeEnteringRoom);
			}
			if(_errorCheckedObservations!=null)
			{
				toReturn.Add(_errorCheckedObservations);
			}
			if(_onTimeArrivalAndNotification!=null)
			{
				toReturn.Add(_onTimeArrivalAndNotification);
			}
			if(_relevantObservationsDocumented!=null)
			{
				toReturn.Add(_relevantObservationsDocumented);
			}
			if(_respondedToQuestionsWithinRequiredTimeframe!=null)
			{
				toReturn.Add(_respondedToQuestionsWithinRequiredTimeframe);
			}
			if(_scansUploadedNotification!=null)
			{
				toReturn.Add(_scansUploadedNotification);
			}
			if(_scoringDoubleChecked!=null)
			{
				toReturn.Add(_scoringDoubleChecked);
			}
			if(_spareSetReplenishmentRequestSent!=null)
			{
				toReturn.Add(_spareSetReplenishmentRequestSent);
			}
			if(_stapledItemsTogether!=null)
			{
				toReturn.Add(_stapledItemsTogether);
			}
			if(_testedClaimantsEnglishReadingLevel!=null)
			{
				toReturn.Add(_testedClaimantsEnglishReadingLevel);
			}
			if(_timeAssessmentLabelCompleted!=null)
			{
				toReturn.Add(_timeAssessmentLabelCompleted);
			}
			if(_tommSimsScoreNotification!=null)
			{
				toReturn.Add(_tommSimsScoreNotification);
			}
			if(_uploadedScanLegibilityVerified!=null)
			{
				toReturn.Add(_uploadedScanLegibilityVerified);
			}
			if(_willPersonallyDropOffPackage!=null)
			{
				toReturn.Add(_willPersonallyDropOffPackage);
			}
			if(_createUser!=null)
			{
				toReturn.Add(_createUser);
			}
			if(_updateUser!=null)
			{
				toReturn.Add(_updateUser);
			}
			if(_appointment!=null)
			{
				toReturn.Add(_appointment);
			}

			return toReturn;
		}
		
		/// <summary>Gets a list of all entity collections stored as member variables in this entity. Only 1:n related collections are returned.</summary>
		/// <returns>Collection with 0 or more IEntityCollection2 objects, referenced by this entity</returns>
		protected override List<IEntityCollection2> GetMemberEntityCollections()
		{
			List<IEntityCollection2> toReturn = new List<IEntityCollection2>();
			return toReturn;
		}

		/// <summary>ISerializable member. Does custom serialization so event handlers do not get serialized. Serializes members of this entity class and uses the base class' implementation to serialize the rest.</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			if (SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
				info.AddValue("_advisedOfUnexpectedDelays", (!this.MarkedForDeletion?_advisedOfUnexpectedDelays:null));
				info.AddValue("_afterAssessmentNotification", (!this.MarkedForDeletion?_afterAssessmentNotification:null));
				info.AddValue("_allFormsCompleted", (!this.MarkedForDeletion?_allFormsCompleted:null));
				info.AddValue("_allPapersHaveClaimantInitialsAndDate", (!this.MarkedForDeletion?_allPapersHaveClaimantInitialsAndDate:null));
				info.AddValue("_askedWhichTestsShouldBeRemoved", (!this.MarkedForDeletion?_askedWhichTestsShouldBeRemoved:null));
				info.AddValue("_claimantArrivalNotification", (!this.MarkedForDeletion?_claimantArrivalNotification:null));
				info.AddValue("_covidFormsCompletedBeforeEnteringRoom", (!this.MarkedForDeletion?_covidFormsCompletedBeforeEnteringRoom:null));
				info.AddValue("_errorCheckedObservations", (!this.MarkedForDeletion?_errorCheckedObservations:null));
				info.AddValue("_onTimeArrivalAndNotification", (!this.MarkedForDeletion?_onTimeArrivalAndNotification:null));
				info.AddValue("_relevantObservationsDocumented", (!this.MarkedForDeletion?_relevantObservationsDocumented:null));
				info.AddValue("_respondedToQuestionsWithinRequiredTimeframe", (!this.MarkedForDeletion?_respondedToQuestionsWithinRequiredTimeframe:null));
				info.AddValue("_scansUploadedNotification", (!this.MarkedForDeletion?_scansUploadedNotification:null));
				info.AddValue("_scoringDoubleChecked", (!this.MarkedForDeletion?_scoringDoubleChecked:null));
				info.AddValue("_spareSetReplenishmentRequestSent", (!this.MarkedForDeletion?_spareSetReplenishmentRequestSent:null));
				info.AddValue("_stapledItemsTogether", (!this.MarkedForDeletion?_stapledItemsTogether:null));
				info.AddValue("_testedClaimantsEnglishReadingLevel", (!this.MarkedForDeletion?_testedClaimantsEnglishReadingLevel:null));
				info.AddValue("_timeAssessmentLabelCompleted", (!this.MarkedForDeletion?_timeAssessmentLabelCompleted:null));
				info.AddValue("_tommSimsScoreNotification", (!this.MarkedForDeletion?_tommSimsScoreNotification:null));
				info.AddValue("_uploadedScanLegibilityVerified", (!this.MarkedForDeletion?_uploadedScanLegibilityVerified:null));
				info.AddValue("_willPersonallyDropOffPackage", (!this.MarkedForDeletion?_willPersonallyDropOffPackage:null));
				info.AddValue("_createUser", (!this.MarkedForDeletion?_createUser:null));
				info.AddValue("_updateUser", (!this.MarkedForDeletion?_updateUser:null));
				info.AddValue("_appointment", (!this.MarkedForDeletion?_appointment:null));
			}
			// __LLBLGENPRO_USER_CODE_REGION_START GetObjectInfo
			// __LLBLGENPRO_USER_CODE_REGION_END
			
			base.GetObjectData(info, context);
		}


				
		/// <summary>Gets a list of all the EntityRelation objects the type of this instance has.</summary>
		/// <returns>A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.</returns>
		protected override List<IEntityRelation> GetAllRelations()
		{
			return new AppointmentProtocolResponseRelations().GetAllRelations();
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAdvisedOfUnexpectedDelays()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.AdvisedOfUnexpectedDelaysId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAfterAssessmentNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.AfterAssessmentNotificationId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAllFormsCompleted()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.AllFormsCompletedId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAllPapersHaveClaimantInitialsAndDate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.AllPapersHaveClaimantInitialsAndDateId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAskedWhichTestsShouldBeRemoved()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.AskedWhichTestsShouldBeRemovedId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoClaimantArrivalNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.ClaimantArrivalNotificationId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCovidFormsCompletedBeforeEnteringRoom()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.CovidFormsCompletedBeforeEnteringRoomId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoErrorCheckedObservations()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.ErrorCheckedObservationsId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOnTimeArrivalAndNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.OnTimeArrivalAndNotificationId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRelevantObservationsDocumented()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.RelevantObservationsDocumentedId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRespondedToQuestionsWithinRequiredTimeframe()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.RespondedToQuestionsWithinRequiredTimeframeId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoScansUploadedNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.ScansUploadedNotificationId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoScoringDoubleChecked()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.ScoringDoubleCheckedId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSpareSetReplenishmentRequestSent()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.SpareSetReplenishmentRequestSentId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStapledItemsTogether()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.StapledItemsTogetherId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestedClaimantsEnglishReadingLevel()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.TestedClaimantsEnglishReadingLevelId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTimeAssessmentLabelCompleted()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.TimeAssessmentLabelCompletedId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTommSimsScoreNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.TommSimsScoreNotificationId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUploadedScanLegibilityVerified()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.UploadedScanLegibilityVerifiedId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AppointmentProtocolResponseValue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoWillPersonallyDropOffPackage()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, null, ComparisonOperator.Equal, this.WillPersonallyDropOffPackageId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCreateUser()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(UserFields.UserId, null, ComparisonOperator.Equal, this.CreateUserId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUpdateUser()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(UserFields.UserId, null, ComparisonOperator.Equal, this.UpdateUserId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Appointment' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAppointment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AppointmentFields.AppointmentId, null, ComparisonOperator.Equal, this.AppointmentId));
			return bucket;
		}
		

		/// <summary>Creates a new instance of the factory related to this entity</summary>
		protected override IEntityFactory2 CreateEntityFactory()
		{
			return EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseEntityFactory));
		}

		/// <summary>Adds the member collections to the collections queue (base first)</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		protected override void AddToMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue) 
		{
			base.AddToMemberEntityCollectionsQueue(collectionsQueue);
		}
		
		/// <summary>Gets the member collections queue from the queue (base first)</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		protected override void GetFromMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue)
		{
			base.GetFromMemberEntityCollectionsQueue(collectionsQueue);

		}
		
		/// <summary>Determines whether the entity has populated member collections</summary>
		/// <returns>true if the entity has populated member collections.</returns>
		protected override bool HasPopulatedMemberEntityCollections()
		{
			bool toReturn = false;
			return toReturn ? true : base.HasPopulatedMemberEntityCollections();
		}
		
		/// <summary>Creates the member entity collections queue.</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		/// <param name="requiredQueue">The required queue.</param>
		protected override void CreateMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue, Queue<bool> requiredQueue) 
		{
			base.CreateMemberEntityCollectionsQueue(collectionsQueue, requiredQueue);
		}

		/// <summary>Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element.</summary>
		/// <returns>Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null</returns>
		protected override Dictionary<string, object> GetRelatedData()
		{
			Dictionary<string, object> toReturn = new Dictionary<string, object>();
			toReturn.Add("AdvisedOfUnexpectedDelays", _advisedOfUnexpectedDelays);
			toReturn.Add("AfterAssessmentNotification", _afterAssessmentNotification);
			toReturn.Add("AllFormsCompleted", _allFormsCompleted);
			toReturn.Add("AllPapersHaveClaimantInitialsAndDate", _allPapersHaveClaimantInitialsAndDate);
			toReturn.Add("AskedWhichTestsShouldBeRemoved", _askedWhichTestsShouldBeRemoved);
			toReturn.Add("ClaimantArrivalNotification", _claimantArrivalNotification);
			toReturn.Add("CovidFormsCompletedBeforeEnteringRoom", _covidFormsCompletedBeforeEnteringRoom);
			toReturn.Add("ErrorCheckedObservations", _errorCheckedObservations);
			toReturn.Add("OnTimeArrivalAndNotification", _onTimeArrivalAndNotification);
			toReturn.Add("RelevantObservationsDocumented", _relevantObservationsDocumented);
			toReturn.Add("RespondedToQuestionsWithinRequiredTimeframe", _respondedToQuestionsWithinRequiredTimeframe);
			toReturn.Add("ScansUploadedNotification", _scansUploadedNotification);
			toReturn.Add("ScoringDoubleChecked", _scoringDoubleChecked);
			toReturn.Add("SpareSetReplenishmentRequestSent", _spareSetReplenishmentRequestSent);
			toReturn.Add("StapledItemsTogether", _stapledItemsTogether);
			toReturn.Add("TestedClaimantsEnglishReadingLevel", _testedClaimantsEnglishReadingLevel);
			toReturn.Add("TimeAssessmentLabelCompleted", _timeAssessmentLabelCompleted);
			toReturn.Add("TommSimsScoreNotification", _tommSimsScoreNotification);
			toReturn.Add("UploadedScanLegibilityVerified", _uploadedScanLegibilityVerified);
			toReturn.Add("WillPersonallyDropOffPackage", _willPersonallyDropOffPackage);
			toReturn.Add("CreateUser", _createUser);
			toReturn.Add("UpdateUser", _updateUser);
			toReturn.Add("Appointment", _appointment);
			return toReturn;
		}

		/// <summary> Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			
			OnInitClassMembersComplete();
		}


		#region Custom Property Hashtable Setup
		/// <summary> Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("AppointmentId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("OnTimeArrivalAndNotificationId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("ClaimantArrivalNotificationId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("CovidFormsCompletedBeforeEnteringRoomId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("TestedClaimantsEnglishReadingLevelId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("TommSimsScoreNotificationId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("AskedWhichTestsShouldBeRemovedId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("AdvisedOfUnexpectedDelaysId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("AfterAssessmentNotificationId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("AllPapersHaveClaimantInitialsAndDateId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("ScoringDoubleCheckedId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("RelevantObservationsDocumentedId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("ErrorCheckedObservationsId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("AllFormsCompletedId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("TimeAssessmentLabelCompletedId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("ScansUploadedNotificationId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("UploadedScanLegibilityVerifiedId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("SpareSetReplenishmentRequestSentId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("RespondedToQuestionsWithinRequiredTimeframeId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("StapledItemsTogetherId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("WillPersonallyDropOffPackageId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("Comments", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("CreateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("CreateUserId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("UpdateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			_fieldsCustomProperties.Add("UpdateUserId", fieldHashtable);
		}
		#endregion

		/// <summary> Removes the sync logic for member _advisedOfUnexpectedDelays</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAdvisedOfUnexpectedDelays(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _advisedOfUnexpectedDelays, new PropertyChangedEventHandler(OnAdvisedOfUnexpectedDelaysPropertyChanged), "AdvisedOfUnexpectedDelays", "AppointmentProtocolResponses", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.AdvisedOfUnexpectedDelaysId });
		}

		/// <summary> setups the sync logic for member _advisedOfUnexpectedDelays</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAdvisedOfUnexpectedDelays(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _advisedOfUnexpectedDelays, new PropertyChangedEventHandler( OnAdvisedOfUnexpectedDelaysPropertyChanged ), "AdvisedOfUnexpectedDelays", "AppointmentProtocolResponses", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.AdvisedOfUnexpectedDelaysId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAdvisedOfUnexpectedDelaysPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _afterAssessmentNotification</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAfterAssessmentNotification(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _afterAssessmentNotification, new PropertyChangedEventHandler(OnAfterAssessmentNotificationPropertyChanged), "AfterAssessmentNotification", "AppointmentProtocolResponses1", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.AfterAssessmentNotificationId });
		}

		/// <summary> setups the sync logic for member _afterAssessmentNotification</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAfterAssessmentNotification(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _afterAssessmentNotification, new PropertyChangedEventHandler( OnAfterAssessmentNotificationPropertyChanged ), "AfterAssessmentNotification", "AppointmentProtocolResponses1", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.AfterAssessmentNotificationId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAfterAssessmentNotificationPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _allFormsCompleted</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAllFormsCompleted(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _allFormsCompleted, new PropertyChangedEventHandler(OnAllFormsCompletedPropertyChanged), "AllFormsCompleted", "AppointmentProtocolResponses2", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAllFormsCompletedIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.AllFormsCompletedId });
		}

		/// <summary> setups the sync logic for member _allFormsCompleted</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAllFormsCompleted(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _allFormsCompleted, new PropertyChangedEventHandler( OnAllFormsCompletedPropertyChanged ), "AllFormsCompleted", "AppointmentProtocolResponses2", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAllFormsCompletedIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.AllFormsCompletedId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAllFormsCompletedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _allPapersHaveClaimantInitialsAndDate</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAllPapersHaveClaimantInitialsAndDate(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _allPapersHaveClaimantInitialsAndDate, new PropertyChangedEventHandler(OnAllPapersHaveClaimantInitialsAndDatePropertyChanged), "AllPapersHaveClaimantInitialsAndDate", "AppointmentProtocolResponses3", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.AllPapersHaveClaimantInitialsAndDateId });
		}

		/// <summary> setups the sync logic for member _allPapersHaveClaimantInitialsAndDate</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAllPapersHaveClaimantInitialsAndDate(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _allPapersHaveClaimantInitialsAndDate, new PropertyChangedEventHandler( OnAllPapersHaveClaimantInitialsAndDatePropertyChanged ), "AllPapersHaveClaimantInitialsAndDate", "AppointmentProtocolResponses3", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.AllPapersHaveClaimantInitialsAndDateId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAllPapersHaveClaimantInitialsAndDatePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _askedWhichTestsShouldBeRemoved</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAskedWhichTestsShouldBeRemoved(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _askedWhichTestsShouldBeRemoved, new PropertyChangedEventHandler(OnAskedWhichTestsShouldBeRemovedPropertyChanged), "AskedWhichTestsShouldBeRemoved", "AppointmentProtocolResponses4", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.AskedWhichTestsShouldBeRemovedId });
		}

		/// <summary> setups the sync logic for member _askedWhichTestsShouldBeRemoved</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAskedWhichTestsShouldBeRemoved(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _askedWhichTestsShouldBeRemoved, new PropertyChangedEventHandler( OnAskedWhichTestsShouldBeRemovedPropertyChanged ), "AskedWhichTestsShouldBeRemoved", "AppointmentProtocolResponses4", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.AskedWhichTestsShouldBeRemovedId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAskedWhichTestsShouldBeRemovedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _claimantArrivalNotification</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncClaimantArrivalNotification(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _claimantArrivalNotification, new PropertyChangedEventHandler(OnClaimantArrivalNotificationPropertyChanged), "ClaimantArrivalNotification", "AppointmentProtocolResponses5", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.ClaimantArrivalNotificationId });
		}

		/// <summary> setups the sync logic for member _claimantArrivalNotification</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncClaimantArrivalNotification(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _claimantArrivalNotification, new PropertyChangedEventHandler( OnClaimantArrivalNotificationPropertyChanged ), "ClaimantArrivalNotification", "AppointmentProtocolResponses5", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.ClaimantArrivalNotificationId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnClaimantArrivalNotificationPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _covidFormsCompletedBeforeEnteringRoom</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCovidFormsCompletedBeforeEnteringRoom(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _covidFormsCompletedBeforeEnteringRoom, new PropertyChangedEventHandler(OnCovidFormsCompletedBeforeEnteringRoomPropertyChanged), "CovidFormsCompletedBeforeEnteringRoom", "AppointmentProtocolResponses6", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.CovidFormsCompletedBeforeEnteringRoomId });
		}

		/// <summary> setups the sync logic for member _covidFormsCompletedBeforeEnteringRoom</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCovidFormsCompletedBeforeEnteringRoom(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _covidFormsCompletedBeforeEnteringRoom, new PropertyChangedEventHandler( OnCovidFormsCompletedBeforeEnteringRoomPropertyChanged ), "CovidFormsCompletedBeforeEnteringRoom", "AppointmentProtocolResponses6", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.CovidFormsCompletedBeforeEnteringRoomId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCovidFormsCompletedBeforeEnteringRoomPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _errorCheckedObservations</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncErrorCheckedObservations(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _errorCheckedObservations, new PropertyChangedEventHandler(OnErrorCheckedObservationsPropertyChanged), "ErrorCheckedObservations", "AppointmentProtocolResponses7", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.ErrorCheckedObservationsId });
		}

		/// <summary> setups the sync logic for member _errorCheckedObservations</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncErrorCheckedObservations(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _errorCheckedObservations, new PropertyChangedEventHandler( OnErrorCheckedObservationsPropertyChanged ), "ErrorCheckedObservations", "AppointmentProtocolResponses7", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.ErrorCheckedObservationsId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnErrorCheckedObservationsPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _onTimeArrivalAndNotification</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOnTimeArrivalAndNotification(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _onTimeArrivalAndNotification, new PropertyChangedEventHandler(OnOnTimeArrivalAndNotificationPropertyChanged), "OnTimeArrivalAndNotification", "AppointmentProtocolResponses8", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.OnTimeArrivalAndNotificationId });
		}

		/// <summary> setups the sync logic for member _onTimeArrivalAndNotification</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOnTimeArrivalAndNotification(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _onTimeArrivalAndNotification, new PropertyChangedEventHandler( OnOnTimeArrivalAndNotificationPropertyChanged ), "OnTimeArrivalAndNotification", "AppointmentProtocolResponses8", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.OnTimeArrivalAndNotificationId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOnTimeArrivalAndNotificationPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _relevantObservationsDocumented</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncRelevantObservationsDocumented(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _relevantObservationsDocumented, new PropertyChangedEventHandler(OnRelevantObservationsDocumentedPropertyChanged), "RelevantObservationsDocumented", "AppointmentProtocolResponses9", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.RelevantObservationsDocumentedId });
		}

		/// <summary> setups the sync logic for member _relevantObservationsDocumented</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncRelevantObservationsDocumented(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _relevantObservationsDocumented, new PropertyChangedEventHandler( OnRelevantObservationsDocumentedPropertyChanged ), "RelevantObservationsDocumented", "AppointmentProtocolResponses9", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.RelevantObservationsDocumentedId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnRelevantObservationsDocumentedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _respondedToQuestionsWithinRequiredTimeframe</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncRespondedToQuestionsWithinRequiredTimeframe(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _respondedToQuestionsWithinRequiredTimeframe, new PropertyChangedEventHandler(OnRespondedToQuestionsWithinRequiredTimeframePropertyChanged), "RespondedToQuestionsWithinRequiredTimeframe", "AppointmentProtocolResponses10", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.RespondedToQuestionsWithinRequiredTimeframeId });
		}

		/// <summary> setups the sync logic for member _respondedToQuestionsWithinRequiredTimeframe</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncRespondedToQuestionsWithinRequiredTimeframe(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _respondedToQuestionsWithinRequiredTimeframe, new PropertyChangedEventHandler( OnRespondedToQuestionsWithinRequiredTimeframePropertyChanged ), "RespondedToQuestionsWithinRequiredTimeframe", "AppointmentProtocolResponses10", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.RespondedToQuestionsWithinRequiredTimeframeId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnRespondedToQuestionsWithinRequiredTimeframePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _scansUploadedNotification</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncScansUploadedNotification(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _scansUploadedNotification, new PropertyChangedEventHandler(OnScansUploadedNotificationPropertyChanged), "ScansUploadedNotification", "AppointmentProtocolResponses11", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.ScansUploadedNotificationId });
		}

		/// <summary> setups the sync logic for member _scansUploadedNotification</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncScansUploadedNotification(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _scansUploadedNotification, new PropertyChangedEventHandler( OnScansUploadedNotificationPropertyChanged ), "ScansUploadedNotification", "AppointmentProtocolResponses11", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.ScansUploadedNotificationId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnScansUploadedNotificationPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _scoringDoubleChecked</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncScoringDoubleChecked(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _scoringDoubleChecked, new PropertyChangedEventHandler(OnScoringDoubleCheckedPropertyChanged), "ScoringDoubleChecked", "AppointmentProtocolResponses12", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.ScoringDoubleCheckedId });
		}

		/// <summary> setups the sync logic for member _scoringDoubleChecked</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncScoringDoubleChecked(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _scoringDoubleChecked, new PropertyChangedEventHandler( OnScoringDoubleCheckedPropertyChanged ), "ScoringDoubleChecked", "AppointmentProtocolResponses12", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.ScoringDoubleCheckedId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnScoringDoubleCheckedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _spareSetReplenishmentRequestSent</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncSpareSetReplenishmentRequestSent(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _spareSetReplenishmentRequestSent, new PropertyChangedEventHandler(OnSpareSetReplenishmentRequestSentPropertyChanged), "SpareSetReplenishmentRequestSent", "AppointmentProtocolResponses13", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.SpareSetReplenishmentRequestSentId });
		}

		/// <summary> setups the sync logic for member _spareSetReplenishmentRequestSent</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncSpareSetReplenishmentRequestSent(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _spareSetReplenishmentRequestSent, new PropertyChangedEventHandler( OnSpareSetReplenishmentRequestSentPropertyChanged ), "SpareSetReplenishmentRequestSent", "AppointmentProtocolResponses13", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.SpareSetReplenishmentRequestSentId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnSpareSetReplenishmentRequestSentPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _stapledItemsTogether</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncStapledItemsTogether(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _stapledItemsTogether, new PropertyChangedEventHandler(OnStapledItemsTogetherPropertyChanged), "StapledItemsTogether", "AppointmentProtocolResponses14", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.StapledItemsTogetherId });
		}

		/// <summary> setups the sync logic for member _stapledItemsTogether</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncStapledItemsTogether(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _stapledItemsTogether, new PropertyChangedEventHandler( OnStapledItemsTogetherPropertyChanged ), "StapledItemsTogether", "AppointmentProtocolResponses14", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.StapledItemsTogetherId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnStapledItemsTogetherPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _testedClaimantsEnglishReadingLevel</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncTestedClaimantsEnglishReadingLevel(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _testedClaimantsEnglishReadingLevel, new PropertyChangedEventHandler(OnTestedClaimantsEnglishReadingLevelPropertyChanged), "TestedClaimantsEnglishReadingLevel", "AppointmentProtocolResponses15", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.TestedClaimantsEnglishReadingLevelId });
		}

		/// <summary> setups the sync logic for member _testedClaimantsEnglishReadingLevel</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncTestedClaimantsEnglishReadingLevel(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _testedClaimantsEnglishReadingLevel, new PropertyChangedEventHandler( OnTestedClaimantsEnglishReadingLevelPropertyChanged ), "TestedClaimantsEnglishReadingLevel", "AppointmentProtocolResponses15", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.TestedClaimantsEnglishReadingLevelId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnTestedClaimantsEnglishReadingLevelPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _timeAssessmentLabelCompleted</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncTimeAssessmentLabelCompleted(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _timeAssessmentLabelCompleted, new PropertyChangedEventHandler(OnTimeAssessmentLabelCompletedPropertyChanged), "TimeAssessmentLabelCompleted", "AppointmentProtocolResponses16", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.TimeAssessmentLabelCompletedId });
		}

		/// <summary> setups the sync logic for member _timeAssessmentLabelCompleted</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncTimeAssessmentLabelCompleted(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _timeAssessmentLabelCompleted, new PropertyChangedEventHandler( OnTimeAssessmentLabelCompletedPropertyChanged ), "TimeAssessmentLabelCompleted", "AppointmentProtocolResponses16", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.TimeAssessmentLabelCompletedId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnTimeAssessmentLabelCompletedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _tommSimsScoreNotification</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncTommSimsScoreNotification(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _tommSimsScoreNotification, new PropertyChangedEventHandler(OnTommSimsScoreNotificationPropertyChanged), "TommSimsScoreNotification", "AppointmentProtocolResponses17", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.TommSimsScoreNotificationId });
		}

		/// <summary> setups the sync logic for member _tommSimsScoreNotification</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncTommSimsScoreNotification(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _tommSimsScoreNotification, new PropertyChangedEventHandler( OnTommSimsScoreNotificationPropertyChanged ), "TommSimsScoreNotification", "AppointmentProtocolResponses17", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.TommSimsScoreNotificationId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnTommSimsScoreNotificationPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _uploadedScanLegibilityVerified</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncUploadedScanLegibilityVerified(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _uploadedScanLegibilityVerified, new PropertyChangedEventHandler(OnUploadedScanLegibilityVerifiedPropertyChanged), "UploadedScanLegibilityVerified", "AppointmentProtocolResponses18", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.UploadedScanLegibilityVerifiedId });
		}

		/// <summary> setups the sync logic for member _uploadedScanLegibilityVerified</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncUploadedScanLegibilityVerified(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _uploadedScanLegibilityVerified, new PropertyChangedEventHandler( OnUploadedScanLegibilityVerifiedPropertyChanged ), "UploadedScanLegibilityVerified", "AppointmentProtocolResponses18", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.UploadedScanLegibilityVerifiedId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnUploadedScanLegibilityVerifiedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _willPersonallyDropOffPackage</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncWillPersonallyDropOffPackage(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _willPersonallyDropOffPackage, new PropertyChangedEventHandler(OnWillPersonallyDropOffPackagePropertyChanged), "WillPersonallyDropOffPackage", "AppointmentProtocolResponses19", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.WillPersonallyDropOffPackageId });
		}

		/// <summary> setups the sync logic for member _willPersonallyDropOffPackage</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncWillPersonallyDropOffPackage(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _willPersonallyDropOffPackage, new PropertyChangedEventHandler( OnWillPersonallyDropOffPackagePropertyChanged ), "WillPersonallyDropOffPackage", "AppointmentProtocolResponses19", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.WillPersonallyDropOffPackageId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnWillPersonallyDropOffPackagePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _createUser</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCreateUser(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _createUser, new PropertyChangedEventHandler(OnCreateUserPropertyChanged), "CreateUser", "AppointmentProtocolResponses", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.UserEntityUsingCreateUserIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.CreateUserId });
		}

		/// <summary> setups the sync logic for member _createUser</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCreateUser(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _createUser, new PropertyChangedEventHandler( OnCreateUserPropertyChanged ), "CreateUser", "AppointmentProtocolResponses", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.UserEntityUsingCreateUserIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.CreateUserId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCreateUserPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _updateUser</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncUpdateUser(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, resetFKFields, ref _updateUser, new PropertyChangedEventHandler(OnUpdateUserPropertyChanged), "UpdateUser", "AppointmentProtocolResponses1", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.UserEntityUsingUpdateUserIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.UpdateUserId });
		}

		/// <summary> setups the sync logic for member _updateUser</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncUpdateUser(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _updateUser, new PropertyChangedEventHandler( OnUpdateUserPropertyChanged ), "UpdateUser", "AppointmentProtocolResponses1", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.UserEntityUsingUpdateUserIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.UpdateUserId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnUpdateUserPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _appointment</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAppointment(bool signalRelatedEntity, bool resetFKFields)
		{
			DesetupSync(signalRelatedEntity, false, ref _appointment, new PropertyChangedEventHandler(OnAppointmentPropertyChanged), "Appointment", "AppointmentProtocolResponse", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentEntityUsingAppointmentIdStatic, true, new int[] { (int)AppointmentProtocolResponseFieldIndex.AppointmentId });
		}
		
		/// <summary> setups the sync logic for member _appointment</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAppointment(IEntityCore relatedEntity)
		{
			SetupSync(relatedEntity, ref _appointment, new PropertyChangedEventHandler( OnAppointmentPropertyChanged ), "Appointment", "AppointmentProtocolResponse", PsychologicalServices.Data.RelationClasses.StaticAppointmentProtocolResponseRelations.AppointmentEntityUsingAppointmentIdStatic, true, new string[] {  }, new int[] { (int)AppointmentProtocolResponseFieldIndex.AppointmentId }); 
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAppointmentPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AppointmentProtocolResponseEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END
			

			OnInitialized();

		}

		#region Class Property Declarations
		/// <summary> The relations object holding all relations of this entity with other entity classes.</summary>
		public  static AppointmentProtocolResponseRelations Relations
		{
			get	{ return new AppointmentProtocolResponseRelations(); }
		}
		
		/// <summary> The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties
		{
			get { return _customProperties;}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAdvisedOfUnexpectedDelays
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("AdvisedOfUnexpectedDelays")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "AdvisedOfUnexpectedDelays", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAfterAssessmentNotification
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("AfterAssessmentNotification")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "AfterAssessmentNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAllFormsCompleted
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("AllFormsCompleted")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "AllFormsCompleted", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAllPapersHaveClaimantInitialsAndDate
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("AllPapersHaveClaimantInitialsAndDate")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "AllPapersHaveClaimantInitialsAndDate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAskedWhichTestsShouldBeRemoved
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("AskedWhichTestsShouldBeRemoved")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "AskedWhichTestsShouldBeRemoved", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathClaimantArrivalNotification
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("ClaimantArrivalNotification")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "ClaimantArrivalNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCovidFormsCompletedBeforeEnteringRoom
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("CovidFormsCompletedBeforeEnteringRoom")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "CovidFormsCompletedBeforeEnteringRoom", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathErrorCheckedObservations
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("ErrorCheckedObservations")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "ErrorCheckedObservations", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOnTimeArrivalAndNotification
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("OnTimeArrivalAndNotification")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "OnTimeArrivalAndNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRelevantObservationsDocumented
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("RelevantObservationsDocumented")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "RelevantObservationsDocumented", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRespondedToQuestionsWithinRequiredTimeframe
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("RespondedToQuestionsWithinRequiredTimeframe")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "RespondedToQuestionsWithinRequiredTimeframe", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathScansUploadedNotification
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("ScansUploadedNotification")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "ScansUploadedNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathScoringDoubleChecked
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("ScoringDoubleChecked")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "ScoringDoubleChecked", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSpareSetReplenishmentRequestSent
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("SpareSetReplenishmentRequestSent")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "SpareSetReplenishmentRequestSent", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStapledItemsTogether
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("StapledItemsTogether")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "StapledItemsTogether", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestedClaimantsEnglishReadingLevel
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("TestedClaimantsEnglishReadingLevel")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "TestedClaimantsEnglishReadingLevel", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTimeAssessmentLabelCompleted
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("TimeAssessmentLabelCompleted")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "TimeAssessmentLabelCompleted", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTommSimsScoreNotification
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("TommSimsScoreNotification")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "TommSimsScoreNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUploadedScanLegibilityVerified
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("UploadedScanLegibilityVerified")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "UploadedScanLegibilityVerified", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AppointmentProtocolResponseValue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathWillPersonallyDropOffPackage
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentProtocolResponseValueEntityFactory))),	(IEntityRelation)GetRelationsForField("WillPersonallyDropOffPackage")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseValueEntity, 0, null, null, null, null, "WillPersonallyDropOffPackage", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCreateUser
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(UserEntityFactory))),	(IEntityRelation)GetRelationsForField("CreateUser")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.UserEntity, 0, null, null, null, null, "CreateUser", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUpdateUser
		{
			get	{ return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(UserEntityFactory))),	(IEntityRelation)GetRelationsForField("UpdateUser")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.UserEntity, 0, null, null, null, null, "UpdateUser", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne); }
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Appointment' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAppointment
		{
			get { return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AppointmentEntityFactory))), (IEntityRelation)GetRelationsForField("Appointment")[0], (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity, (int)PsychologicalServices.Data.EntityType.AppointmentEntity, 0, null, null, null, null, "Appointment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);	}
		}


		/// <summary> The custom properties for the type of this entity instance.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType
		{
			get { return CustomProperties;}
		}

		/// <summary> The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties
		{
			get { return _fieldsCustomProperties;}
		}

		/// <summary> The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType
		{
			get { return FieldsCustomProperties;}
		}

		/// <summary> The AppointmentId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."AppointmentId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 AppointmentId
		{
			get { return (System.Int32)GetValue((int)AppointmentProtocolResponseFieldIndex.AppointmentId, true); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.AppointmentId, value); }
		}

		/// <summary> The OnTimeArrivalAndNotificationId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."OnTimeArrivalAndNotificationId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> OnTimeArrivalAndNotificationId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.OnTimeArrivalAndNotificationId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.OnTimeArrivalAndNotificationId, value); }
		}

		/// <summary> The ClaimantArrivalNotificationId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."ClaimantArrivalNotificationId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ClaimantArrivalNotificationId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.ClaimantArrivalNotificationId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.ClaimantArrivalNotificationId, value); }
		}

		/// <summary> The CovidFormsCompletedBeforeEnteringRoomId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."CovidFormsCompletedBeforeEnteringRoomId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> CovidFormsCompletedBeforeEnteringRoomId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.CovidFormsCompletedBeforeEnteringRoomId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.CovidFormsCompletedBeforeEnteringRoomId, value); }
		}

		/// <summary> The TestedClaimantsEnglishReadingLevelId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."TestedClaimantsEnglishReadingLevelId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TestedClaimantsEnglishReadingLevelId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.TestedClaimantsEnglishReadingLevelId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.TestedClaimantsEnglishReadingLevelId, value); }
		}

		/// <summary> The TommSimsScoreNotificationId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."TommSimsScoreNotificationId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TommSimsScoreNotificationId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.TommSimsScoreNotificationId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.TommSimsScoreNotificationId, value); }
		}

		/// <summary> The AskedWhichTestsShouldBeRemovedId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."AskedWhichTestsShouldBeRemovedId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> AskedWhichTestsShouldBeRemovedId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.AskedWhichTestsShouldBeRemovedId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.AskedWhichTestsShouldBeRemovedId, value); }
		}

		/// <summary> The AdvisedOfUnexpectedDelaysId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."AdvisedOfUnexpectedDelaysId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> AdvisedOfUnexpectedDelaysId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.AdvisedOfUnexpectedDelaysId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.AdvisedOfUnexpectedDelaysId, value); }
		}

		/// <summary> The AfterAssessmentNotificationId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."AfterAssessmentNotificationId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> AfterAssessmentNotificationId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.AfterAssessmentNotificationId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.AfterAssessmentNotificationId, value); }
		}

		/// <summary> The AllPapersHaveClaimantInitialsAndDateId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."AllPapersHaveClaimantInitialsAndDateId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> AllPapersHaveClaimantInitialsAndDateId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.AllPapersHaveClaimantInitialsAndDateId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.AllPapersHaveClaimantInitialsAndDateId, value); }
		}

		/// <summary> The ScoringDoubleCheckedId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."ScoringDoubleCheckedId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ScoringDoubleCheckedId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.ScoringDoubleCheckedId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.ScoringDoubleCheckedId, value); }
		}

		/// <summary> The RelevantObservationsDocumentedId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."RelevantObservationsDocumentedId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> RelevantObservationsDocumentedId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.RelevantObservationsDocumentedId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.RelevantObservationsDocumentedId, value); }
		}

		/// <summary> The ErrorCheckedObservationsId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."ErrorCheckedObservationsId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ErrorCheckedObservationsId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.ErrorCheckedObservationsId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.ErrorCheckedObservationsId, value); }
		}

		/// <summary> The AllFormsCompletedId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."AllFormsCompletedId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> AllFormsCompletedId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.AllFormsCompletedId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.AllFormsCompletedId, value); }
		}

		/// <summary> The TimeAssessmentLabelCompletedId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."TimeAssessmentLabelCompletedId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TimeAssessmentLabelCompletedId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.TimeAssessmentLabelCompletedId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.TimeAssessmentLabelCompletedId, value); }
		}

		/// <summary> The ScansUploadedNotificationId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."ScansUploadedNotificationId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ScansUploadedNotificationId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.ScansUploadedNotificationId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.ScansUploadedNotificationId, value); }
		}

		/// <summary> The UploadedScanLegibilityVerifiedId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."UploadedScanLegibilityVerifiedId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> UploadedScanLegibilityVerifiedId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.UploadedScanLegibilityVerifiedId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.UploadedScanLegibilityVerifiedId, value); }
		}

		/// <summary> The SpareSetReplenishmentRequestSentId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."SpareSetReplenishmentRequestSentId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SpareSetReplenishmentRequestSentId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.SpareSetReplenishmentRequestSentId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.SpareSetReplenishmentRequestSentId, value); }
		}

		/// <summary> The RespondedToQuestionsWithinRequiredTimeframeId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."RespondedToQuestionsWithinRequiredTimeframeId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> RespondedToQuestionsWithinRequiredTimeframeId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.RespondedToQuestionsWithinRequiredTimeframeId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.RespondedToQuestionsWithinRequiredTimeframeId, value); }
		}

		/// <summary> The StapledItemsTogetherId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."StapledItemsTogetherId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> StapledItemsTogetherId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.StapledItemsTogetherId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.StapledItemsTogetherId, value); }
		}

		/// <summary> The WillPersonallyDropOffPackageId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."WillPersonallyDropOffPackageId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> WillPersonallyDropOffPackageId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AppointmentProtocolResponseFieldIndex.WillPersonallyDropOffPackageId, false); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.WillPersonallyDropOffPackageId, value); }
		}

		/// <summary> The Comments property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."Comments"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 1000<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Comments
		{
			get { return (System.String)GetValue((int)AppointmentProtocolResponseFieldIndex.Comments, true); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.Comments, value); }
		}

		/// <summary> The CreateDate property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."CreateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTimeOffset, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTimeOffset CreateDate
		{
			get { return (System.DateTimeOffset)GetValue((int)AppointmentProtocolResponseFieldIndex.CreateDate, true); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.CreateDate, value); }
		}

		/// <summary> The CreateUserId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."CreateUserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 CreateUserId
		{
			get { return (System.Int32)GetValue((int)AppointmentProtocolResponseFieldIndex.CreateUserId, true); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.CreateUserId, value); }
		}

		/// <summary> The UpdateDate property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."UpdateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTimeOffset, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTimeOffset UpdateDate
		{
			get { return (System.DateTimeOffset)GetValue((int)AppointmentProtocolResponseFieldIndex.UpdateDate, true); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.UpdateDate, value); }
		}

		/// <summary> The UpdateUserId property of the Entity AppointmentProtocolResponse<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AppointmentProtocolResponses"."UpdateUserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 UpdateUserId
		{
			get { return (System.Int32)GetValue((int)AppointmentProtocolResponseFieldIndex.UpdateUserId, true); }
			set	{ SetValue((int)AppointmentProtocolResponseFieldIndex.UpdateUserId, value); }
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity AdvisedOfUnexpectedDelays
		{
			get	{ return _advisedOfUnexpectedDelays; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncAdvisedOfUnexpectedDelays(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses", "AdvisedOfUnexpectedDelays", _advisedOfUnexpectedDelays, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity AfterAssessmentNotification
		{
			get	{ return _afterAssessmentNotification; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncAfterAssessmentNotification(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses1", "AfterAssessmentNotification", _afterAssessmentNotification, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity AllFormsCompleted
		{
			get	{ return _allFormsCompleted; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncAllFormsCompleted(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses2", "AllFormsCompleted", _allFormsCompleted, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity AllPapersHaveClaimantInitialsAndDate
		{
			get	{ return _allPapersHaveClaimantInitialsAndDate; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncAllPapersHaveClaimantInitialsAndDate(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses3", "AllPapersHaveClaimantInitialsAndDate", _allPapersHaveClaimantInitialsAndDate, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity AskedWhichTestsShouldBeRemoved
		{
			get	{ return _askedWhichTestsShouldBeRemoved; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncAskedWhichTestsShouldBeRemoved(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses4", "AskedWhichTestsShouldBeRemoved", _askedWhichTestsShouldBeRemoved, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity ClaimantArrivalNotification
		{
			get	{ return _claimantArrivalNotification; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncClaimantArrivalNotification(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses5", "ClaimantArrivalNotification", _claimantArrivalNotification, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity CovidFormsCompletedBeforeEnteringRoom
		{
			get	{ return _covidFormsCompletedBeforeEnteringRoom; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncCovidFormsCompletedBeforeEnteringRoom(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses6", "CovidFormsCompletedBeforeEnteringRoom", _covidFormsCompletedBeforeEnteringRoom, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity ErrorCheckedObservations
		{
			get	{ return _errorCheckedObservations; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncErrorCheckedObservations(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses7", "ErrorCheckedObservations", _errorCheckedObservations, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity OnTimeArrivalAndNotification
		{
			get	{ return _onTimeArrivalAndNotification; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncOnTimeArrivalAndNotification(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses8", "OnTimeArrivalAndNotification", _onTimeArrivalAndNotification, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity RelevantObservationsDocumented
		{
			get	{ return _relevantObservationsDocumented; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncRelevantObservationsDocumented(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses9", "RelevantObservationsDocumented", _relevantObservationsDocumented, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity RespondedToQuestionsWithinRequiredTimeframe
		{
			get	{ return _respondedToQuestionsWithinRequiredTimeframe; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncRespondedToQuestionsWithinRequiredTimeframe(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses10", "RespondedToQuestionsWithinRequiredTimeframe", _respondedToQuestionsWithinRequiredTimeframe, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity ScansUploadedNotification
		{
			get	{ return _scansUploadedNotification; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncScansUploadedNotification(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses11", "ScansUploadedNotification", _scansUploadedNotification, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity ScoringDoubleChecked
		{
			get	{ return _scoringDoubleChecked; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncScoringDoubleChecked(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses12", "ScoringDoubleChecked", _scoringDoubleChecked, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity SpareSetReplenishmentRequestSent
		{
			get	{ return _spareSetReplenishmentRequestSent; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncSpareSetReplenishmentRequestSent(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses13", "SpareSetReplenishmentRequestSent", _spareSetReplenishmentRequestSent, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity StapledItemsTogether
		{
			get	{ return _stapledItemsTogether; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncStapledItemsTogether(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses14", "StapledItemsTogether", _stapledItemsTogether, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity TestedClaimantsEnglishReadingLevel
		{
			get	{ return _testedClaimantsEnglishReadingLevel; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncTestedClaimantsEnglishReadingLevel(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses15", "TestedClaimantsEnglishReadingLevel", _testedClaimantsEnglishReadingLevel, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity TimeAssessmentLabelCompleted
		{
			get	{ return _timeAssessmentLabelCompleted; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncTimeAssessmentLabelCompleted(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses16", "TimeAssessmentLabelCompleted", _timeAssessmentLabelCompleted, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity TommSimsScoreNotification
		{
			get	{ return _tommSimsScoreNotification; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncTommSimsScoreNotification(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses17", "TommSimsScoreNotification", _tommSimsScoreNotification, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity UploadedScanLegibilityVerified
		{
			get	{ return _uploadedScanLegibilityVerified; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncUploadedScanLegibilityVerified(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses18", "UploadedScanLegibilityVerified", _uploadedScanLegibilityVerified, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentProtocolResponseValueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AppointmentProtocolResponseValueEntity WillPersonallyDropOffPackage
		{
			get	{ return _willPersonallyDropOffPackage; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncWillPersonallyDropOffPackage(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses19", "WillPersonallyDropOffPackage", _willPersonallyDropOffPackage, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity CreateUser
		{
			get	{ return _createUser; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncCreateUser(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses", "CreateUser", _createUser, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity UpdateUser
		{
			get	{ return _updateUser; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncUpdateUser(value);
				}
				else
				{
					SetSingleRelatedEntityNavigator(value, "AppointmentProtocolResponses1", "UpdateUser", _updateUser, true); 
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AppointmentEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned.<br/><br/>
		/// </summary>
		[Browsable(true)]
		public virtual AppointmentEntity Appointment
		{
			get { return _appointment; }
			set
			{
				if(this.IsDeserializing)
				{
					SetupSyncAppointment(value);
					CallSetRelatedEntityDuringDeserialization(value, "AppointmentProtocolResponse");
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_appointment !=null);
						DesetupSyncAppointment(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("Appointment");
						}
					}
					else
					{
						if(_appointment!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "AppointmentProtocolResponse");
							SetupSyncAppointment(value);
						}
					}
				}
			}
		}
	
		/// <summary> Gets the type of the hierarchy this entity is in. </summary>
		protected override InheritanceHierarchyType LLBLGenProIsInHierarchyOfType
		{
			get { return InheritanceHierarchyType.None;}
		}
		
		/// <summary> Gets or sets a value indicating whether this entity is a subtype</summary>
		protected override bool LLBLGenProIsSubType
		{
			get { return false;}
		}
		
		/// <summary>Returns the PsychologicalServices.Data.EntityType enum value for this entity.</summary>
		[Browsable(false), XmlIgnore]
		protected override int LLBLGenProEntityTypeValue 
		{ 
			get { return (int)PsychologicalServices.Data.EntityType.AppointmentProtocolResponseEntity; }
		}

		#endregion


		#region Custom Entity code
		
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		
		#endregion

		#region Included code

		#endregion
	}
}
