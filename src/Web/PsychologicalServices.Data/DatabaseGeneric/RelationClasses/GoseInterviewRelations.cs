//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.3.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Collections.Generic;
using PsychologicalServices.Data;
using PsychologicalServices.Data.FactoryClasses;
using PsychologicalServices.Data.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace PsychologicalServices.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: GoseInterview. </summary>
	public partial class GoseInterviewRelations
	{
		/// <summary>CTor</summary>
		public GoseInterviewRelations()
		{
		}

		/// <summary>Gets all relations of the GoseInterviewEntity as a list of IEntityRelation objects.</summary>
		/// <returns>a list of IEntityRelation objects</returns>
		public virtual List<IEntityRelation> GetAllRelations()
		{
			List<IEntityRelation> toReturn = new List<IEntityRelation>();
			toReturn.Add(this.AssessmentEntityUsingAssessmentId);
			toReturn.Add(this.GoseAccidentTimeframeEntityUsingAccidentTimeframeId);
			toReturn.Add(this.GoseFamilyAndFriendshipsDisruptionLevelEntityUsingFamilyAndFriendshipsDisruptionLevelId);
			toReturn.Add(this.GoseRespondentTypeEntityUsingRespondentTypeId);
			toReturn.Add(this.GoseReturnToNormalLifeOutcomeFactorEntityUsingReturnToNormalLifeMostImportantFactorInOutcomeId);
			toReturn.Add(this.GoseSocialAndLeisureRestrictionExtentEntityUsingSocialAndLeisureExtentOfRestrictionId);
			toReturn.Add(this.GoseWorkRestrictionLevelEntityUsingWorkRestrictionLevelId);
			toReturn.Add(this.UserEntityUsingCreateUserId);
			toReturn.Add(this.UserEntityUsingUpdateUserId);
			return toReturn;
		}

		#region Class Property Declarations



		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and AssessmentEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.AssessmentId - Assessment.AssessmentId
		/// </summary>
		public virtual IEntityRelation AssessmentEntityUsingAssessmentId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "Assessment", false);
				relation.AddEntityFieldPair(AssessmentFields.AssessmentId, GoseInterviewFields.AssessmentId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AssessmentEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and GoseAccidentTimeframeEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.AccidentTimeframeId - GoseAccidentTimeframe.GoseAccidentTimeframeId
		/// </summary>
		public virtual IEntityRelation GoseAccidentTimeframeEntityUsingAccidentTimeframeId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "GoseAccidentTimeframe", false);
				relation.AddEntityFieldPair(GoseAccidentTimeframeFields.GoseAccidentTimeframeId, GoseInterviewFields.AccidentTimeframeId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseAccidentTimeframeEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and GoseFamilyAndFriendshipsDisruptionLevelEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.FamilyAndFriendshipsDisruptionLevelId - GoseFamilyAndFriendshipsDisruptionLevel.GoseFamilyAndFriendshipsDisruptionLevelId
		/// </summary>
		public virtual IEntityRelation GoseFamilyAndFriendshipsDisruptionLevelEntityUsingFamilyAndFriendshipsDisruptionLevelId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "GoseFamilyAndFriendshipsDisruptionLevel", false);
				relation.AddEntityFieldPair(GoseFamilyAndFriendshipsDisruptionLevelFields.GoseFamilyAndFriendshipsDisruptionLevelId, GoseInterviewFields.FamilyAndFriendshipsDisruptionLevelId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseFamilyAndFriendshipsDisruptionLevelEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and GoseRespondentTypeEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.RespondentTypeId - GoseRespondentType.GoseRespondentTypeId
		/// </summary>
		public virtual IEntityRelation GoseRespondentTypeEntityUsingRespondentTypeId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "GoseRespondentType", false);
				relation.AddEntityFieldPair(GoseRespondentTypeFields.GoseRespondentTypeId, GoseInterviewFields.RespondentTypeId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseRespondentTypeEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and GoseReturnToNormalLifeOutcomeFactorEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.ReturnToNormalLifeMostImportantFactorInOutcomeId - GoseReturnToNormalLifeOutcomeFactor.GoseReturnToNormalLifeOutcomeFactorId
		/// </summary>
		public virtual IEntityRelation GoseReturnToNormalLifeOutcomeFactorEntityUsingReturnToNormalLifeMostImportantFactorInOutcomeId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "GoseReturnToNormalLifeOutcomeFactor", false);
				relation.AddEntityFieldPair(GoseReturnToNormalLifeOutcomeFactorFields.GoseReturnToNormalLifeOutcomeFactorId, GoseInterviewFields.ReturnToNormalLifeMostImportantFactorInOutcomeId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseReturnToNormalLifeOutcomeFactorEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and GoseSocialAndLeisureRestrictionExtentEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.SocialAndLeisureExtentOfRestrictionId - GoseSocialAndLeisureRestrictionExtent.GoseSocialAndLeisureRestrictionExtentId
		/// </summary>
		public virtual IEntityRelation GoseSocialAndLeisureRestrictionExtentEntityUsingSocialAndLeisureExtentOfRestrictionId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "GoseSocialAndLeisureRestrictionExtent", false);
				relation.AddEntityFieldPair(GoseSocialAndLeisureRestrictionExtentFields.GoseSocialAndLeisureRestrictionExtentId, GoseInterviewFields.SocialAndLeisureExtentOfRestrictionId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseSocialAndLeisureRestrictionExtentEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and GoseWorkRestrictionLevelEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.WorkRestrictionLevelId - GoseWorkRestrictionLevel.GoseWorkRestrictionLevelId
		/// </summary>
		public virtual IEntityRelation GoseWorkRestrictionLevelEntityUsingWorkRestrictionLevelId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "GoseWorkRestrictionLevel", false);
				relation.AddEntityFieldPair(GoseWorkRestrictionLevelFields.GoseWorkRestrictionLevelId, GoseInterviewFields.WorkRestrictionLevelId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseWorkRestrictionLevelEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and UserEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.CreateUserId - User.UserId
		/// </summary>
		public virtual IEntityRelation UserEntityUsingCreateUserId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "CreateUser", false);
				relation.AddEntityFieldPair(UserFields.UserId, GoseInterviewFields.CreateUserId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("UserEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between GoseInterviewEntity and UserEntity over the m:1 relation they have, using the relation between the fields:
		/// GoseInterview.UpdateUserId - User.UserId
		/// </summary>
		public virtual IEntityRelation UserEntityUsingUpdateUserId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "UpdateUser", false);
				relation.AddEntityFieldPair(UserFields.UserId, GoseInterviewFields.UpdateUserId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("UserEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("GoseInterviewEntity", true);
				return relation;
			}
		}
		/// <summary>stub, not used in this entity, only for TargetPerEntity entities.</summary>
		public virtual IEntityRelation GetSubTypeRelation(string subTypeEntityName) { return null; }
		/// <summary>stub, not used in this entity, only for TargetPerEntity entities.</summary>
		public virtual IEntityRelation GetSuperTypeRelation() { return null;}
		#endregion

		#region Included Code

		#endregion
	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticGoseInterviewRelations
	{
		internal static readonly IEntityRelation AssessmentEntityUsingAssessmentIdStatic = new GoseInterviewRelations().AssessmentEntityUsingAssessmentId;
		internal static readonly IEntityRelation GoseAccidentTimeframeEntityUsingAccidentTimeframeIdStatic = new GoseInterviewRelations().GoseAccidentTimeframeEntityUsingAccidentTimeframeId;
		internal static readonly IEntityRelation GoseFamilyAndFriendshipsDisruptionLevelEntityUsingFamilyAndFriendshipsDisruptionLevelIdStatic = new GoseInterviewRelations().GoseFamilyAndFriendshipsDisruptionLevelEntityUsingFamilyAndFriendshipsDisruptionLevelId;
		internal static readonly IEntityRelation GoseRespondentTypeEntityUsingRespondentTypeIdStatic = new GoseInterviewRelations().GoseRespondentTypeEntityUsingRespondentTypeId;
		internal static readonly IEntityRelation GoseReturnToNormalLifeOutcomeFactorEntityUsingReturnToNormalLifeMostImportantFactorInOutcomeIdStatic = new GoseInterviewRelations().GoseReturnToNormalLifeOutcomeFactorEntityUsingReturnToNormalLifeMostImportantFactorInOutcomeId;
		internal static readonly IEntityRelation GoseSocialAndLeisureRestrictionExtentEntityUsingSocialAndLeisureExtentOfRestrictionIdStatic = new GoseInterviewRelations().GoseSocialAndLeisureRestrictionExtentEntityUsingSocialAndLeisureExtentOfRestrictionId;
		internal static readonly IEntityRelation GoseWorkRestrictionLevelEntityUsingWorkRestrictionLevelIdStatic = new GoseInterviewRelations().GoseWorkRestrictionLevelEntityUsingWorkRestrictionLevelId;
		internal static readonly IEntityRelation UserEntityUsingCreateUserIdStatic = new GoseInterviewRelations().UserEntityUsingCreateUserId;
		internal static readonly IEntityRelation UserEntityUsingUpdateUserIdStatic = new GoseInterviewRelations().UserEntityUsingUpdateUserId;

		/// <summary>CTor</summary>
		static StaticGoseInterviewRelations()
		{
		}
	}
}
