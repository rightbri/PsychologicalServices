//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.3.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Collections.Generic;
using PsychologicalServices.Data;
using PsychologicalServices.Data.FactoryClasses;
using PsychologicalServices.Data.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace PsychologicalServices.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AppointmentProtocolResponse. </summary>
	public partial class AppointmentProtocolResponseRelations
	{
		/// <summary>CTor</summary>
		public AppointmentProtocolResponseRelations()
		{
		}

		/// <summary>Gets all relations of the AppointmentProtocolResponseEntity as a list of IEntityRelation objects.</summary>
		/// <returns>a list of IEntityRelation objects</returns>
		public virtual List<IEntityRelation> GetAllRelations()
		{
			List<IEntityRelation> toReturn = new List<IEntityRelation>();
			toReturn.Add(this.AppointmentEntityUsingAppointmentId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingAllFormsCompletedId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedId);
			toReturn.Add(this.AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageId);
			toReturn.Add(this.UserEntityUsingCreateUserId);
			toReturn.Add(this.UserEntityUsingUpdateUserId);
			return toReturn;
		}

		#region Class Property Declarations


		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentEntity over the 1:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.AppointmentId - Appointment.AppointmentId
		/// </summary>
		public virtual IEntityRelation AppointmentEntityUsingAppointmentId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne, "Appointment", false);



				relation.AddEntityFieldPair(AppointmentFields.AppointmentId, AppointmentProtocolResponseFields.AppointmentId);

				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}

		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.AdvisedOfUnexpectedDelaysId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "AdvisedOfUnexpectedDelays", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.AdvisedOfUnexpectedDelaysId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.AfterAssessmentNotificationId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "AfterAssessmentNotification", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.AfterAssessmentNotificationId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.AllFormsCompletedId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingAllFormsCompletedId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "AllFormsCompleted", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.AllFormsCompletedId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.AllPapersHaveClaimantInitialsAndDateId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "AllPapersHaveClaimantInitialsAndDate", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.AllPapersHaveClaimantInitialsAndDateId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.AskedWhichTestsShouldBeRemovedId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "AskedWhichTestsShouldBeRemoved", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.AskedWhichTestsShouldBeRemovedId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.ClaimantArrivalNotificationId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "ClaimantArrivalNotification", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.ClaimantArrivalNotificationId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.CovidFormsCompletedBeforeEnteringRoomId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "CovidFormsCompletedBeforeEnteringRoom", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.CovidFormsCompletedBeforeEnteringRoomId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.ErrorCheckedObservationsId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "ErrorCheckedObservations", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.ErrorCheckedObservationsId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.OnTimeArrivalAndNotificationId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "OnTimeArrivalAndNotification", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.OnTimeArrivalAndNotificationId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.RelevantObservationsDocumentedId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "RelevantObservationsDocumented", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.RelevantObservationsDocumentedId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.RespondedToQuestionsWithinRequiredTimeframeId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "RespondedToQuestionsWithinRequiredTimeframe", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.RespondedToQuestionsWithinRequiredTimeframeId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.ScansUploadedNotificationId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "ScansUploadedNotification", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.ScansUploadedNotificationId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.ScoringDoubleCheckedId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "ScoringDoubleChecked", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.ScoringDoubleCheckedId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.SpareSetReplenishmentRequestSentId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "SpareSetReplenishmentRequestSent", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.SpareSetReplenishmentRequestSentId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.StapledItemsTogetherId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "StapledItemsTogether", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.StapledItemsTogetherId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.TestedClaimantsEnglishReadingLevelId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "TestedClaimantsEnglishReadingLevel", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.TestedClaimantsEnglishReadingLevelId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.TimeAssessmentLabelCompletedId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "TimeAssessmentLabelCompleted", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.TimeAssessmentLabelCompletedId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.TommSimsScoreNotificationId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "TommSimsScoreNotification", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.TommSimsScoreNotificationId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.UploadedScanLegibilityVerifiedId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "UploadedScanLegibilityVerified", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.UploadedScanLegibilityVerifiedId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and AppointmentProtocolResponseValueEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.WillPersonallyDropOffPackageId - AppointmentProtocolResponseValue.AppointmentProtocolResponseValueId
		/// </summary>
		public virtual IEntityRelation AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "WillPersonallyDropOffPackage", false);
				relation.AddEntityFieldPair(AppointmentProtocolResponseValueFields.AppointmentProtocolResponseValueId, AppointmentProtocolResponseFields.WillPersonallyDropOffPackageId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseValueEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and UserEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.CreateUserId - User.UserId
		/// </summary>
		public virtual IEntityRelation UserEntityUsingCreateUserId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "CreateUser", false);
				relation.AddEntityFieldPair(UserFields.UserId, AppointmentProtocolResponseFields.CreateUserId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("UserEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>Returns a new IEntityRelation object, between AppointmentProtocolResponseEntity and UserEntity over the m:1 relation they have, using the relation between the fields:
		/// AppointmentProtocolResponse.UpdateUserId - User.UserId
		/// </summary>
		public virtual IEntityRelation UserEntityUsingUpdateUserId
		{
			get
			{
				IEntityRelation relation = new EntityRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne, "UpdateUser", false);
				relation.AddEntityFieldPair(UserFields.UserId, AppointmentProtocolResponseFields.UpdateUserId);
				relation.InheritanceInfoPkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("UserEntity", false);
				relation.InheritanceInfoFkSideEntity = InheritanceInfoProviderSingleton.GetInstance().GetInheritanceInfo("AppointmentProtocolResponseEntity", true);
				return relation;
			}
		}
		/// <summary>stub, not used in this entity, only for TargetPerEntity entities.</summary>
		public virtual IEntityRelation GetSubTypeRelation(string subTypeEntityName) { return null; }
		/// <summary>stub, not used in this entity, only for TargetPerEntity entities.</summary>
		public virtual IEntityRelation GetSuperTypeRelation() { return null;}
		#endregion

		#region Included Code

		#endregion
	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAppointmentProtocolResponseRelations
	{
		internal static readonly IEntityRelation AppointmentEntityUsingAppointmentIdStatic = new AppointmentProtocolResponseRelations().AppointmentEntityUsingAppointmentId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingAdvisedOfUnexpectedDelaysId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingAfterAssessmentNotificationId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingAllFormsCompletedIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingAllFormsCompletedId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingAllPapersHaveClaimantInitialsAndDateId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingAskedWhichTestsShouldBeRemovedId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingClaimantArrivalNotificationId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingCovidFormsCompletedBeforeEnteringRoomId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingErrorCheckedObservationsId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingOnTimeArrivalAndNotificationId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingRelevantObservationsDocumentedId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingRespondedToQuestionsWithinRequiredTimeframeId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingScansUploadedNotificationId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingScoringDoubleCheckedId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingSpareSetReplenishmentRequestSentId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingStapledItemsTogetherId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingTestedClaimantsEnglishReadingLevelId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingTimeAssessmentLabelCompletedId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingTommSimsScoreNotificationId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingUploadedScanLegibilityVerifiedId;
		internal static readonly IEntityRelation AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageIdStatic = new AppointmentProtocolResponseRelations().AppointmentProtocolResponseValueEntityUsingWillPersonallyDropOffPackageId;
		internal static readonly IEntityRelation UserEntityUsingCreateUserIdStatic = new AppointmentProtocolResponseRelations().UserEntityUsingCreateUserId;
		internal static readonly IEntityRelation UserEntityUsingUpdateUserIdStatic = new AppointmentProtocolResponseRelations().UserEntityUsingUpdateUserId;

		/// <summary>CTor</summary>
		static StaticAppointmentProtocolResponseRelations()
		{
		}
	}
}
